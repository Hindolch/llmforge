#!/usr/bin/env python3

import argparse
import subprocess
from huggingface_hub import HfApi

def create_model_repo(hf_token_path, repo_name):
    with open(hf_token_path) as f:
        token = f.read().strip()
    api = HfApi(token=token)
    api.create_repo(repo_id=repo_name, repo_type="model", exist_ok=True)
    print(f"✅ Created or confirmed model repo: {repo_name}")
    return token

def finetune_main(args):
    try:
        # Create HF model repo if needed and extract token
        token = None
        if args.push_to_hub:
            token = create_model_repo(args.hf_auth, args.model_repo)
        else:
            with open(args.hf_auth) as f:
                token = f.read().strip()

        # Create modal secret from HF token
        subprocess.run([
            "modal", "secret", "create", "--force", "huggingface-token", f"HUGGINGFACE_TOKEN={token}"
        ], check=True)

        # Deploy Modal app
        subprocess.run(["modal", "deploy", "src/finetune.py"], check=True)

        # Run the training job
        cmd = [
    "modal", "run", "src.finetune::run_finetune",
    "--dataset-repo", args.dataset_repo,
    "--model-repo", args.model_repo,
]

        subprocess.run(cmd, check=True)
        print("✅ Fine-tune job launched!")

    except subprocess.CalledProcessError as e:
        print(f"❌ Modal command failed: {e}")
        raise

def main():
    parser = argparse.ArgumentParser(prog="llmforge")
    subparsers = parser.add_subparsers(dest="command", required=True)

    finetune_parser = subparsers.add_parser("finetune", help="Fine-tune a model on HF dataset.")
    finetune_parser.add_argument("--dataset-repo", required=True, help="HuggingFace dataset repo (e.g. user/dataset)")
    finetune_parser.add_argument("--model-repo", required=True, help="HuggingFace model repo (e.g. user/model)")
    finetune_parser.add_argument("--hf-auth", required=True, help="Path to HuggingFace token file")
    finetune_parser.add_argument("--push-to-hub", action="store_true", help="Push model to Hub after training")

    args = parser.parse_args()

    if args.command == "finetune":
        finetune_main(args)

if __name__ == "__main__":
    main()
